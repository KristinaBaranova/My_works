Создание таблиц

create table CUSTOMERS (ID number(4) PRIMARY KEY,
NAME varchar2(30));

create table EMPLOEES (ID number(4) PRIMARY KEY,
NAME varchar2(30), CATEGORY varchar2(30));

create table CHECKS (ID number(4) PRIMARY KEY, ID_EMPLOEE number(4),
ID_CUSTOMER number(4), "DATE" date, AMOUNT number(10),
FOREIGN KEY(ID_EMPLOEE) REFERENCES EMPLOEES(ID),
FOREIGN KEY(ID_CUSTOMER) REFERENCES CUSTOMERS(ID));

create table PRODUCTS (ID number(4) PRIMARY KEY,
NAME varchar2(20), PRICE number(10));

create table PRODUCT_CHECK (ID_CHECK number(4), ID_PRODUCT number(4),
"NUMBER" number(10),
FOREIGN KEY(ID_CHECK) REFERENCES CHECKS(ID),
FOREIGN KEY(ID_PRODUCT) REFERENCES PRODUCTS(ID));

Наполнение данными

INSERT ALL
 INTO CUSTOMERS (ID,NAME) VALUES (1, 'Sidorov')
 INTO CUSTOMERS (ID,NAME) VALUES (2, 'Goncharov')
 INTO CUSTOMERS (ID,NAME) VALUES (3, 'Ivanov')
 INTO CUSTOMERS (ID,NAME) VALUES (4, 'Popov')
SELECT* FROM dual;

INSERT ALL
 INTO EMPLOEES (ID,NAME,CATEGORY) VALUES (101, 'Konovalov', 'junior')
 INTO EMPLOEES (ID,NAME,CATEGORY) VALUES (102, 'Petrov', 'Middle')
 INTO EMPLOEES (ID,NAME,CATEGORY) VALUES (103, 'Shipulin', 'Junior')
 INTO EMPLOEES (ID,NAME,CATEGORY) VALUES (104, 'Golovin', 'Junior')
 INTO EMPLOEES (ID,NAME,CATEGORY) VALUES (105, 'Titov', 'Senior')
 INTO EMPLOEES (ID,NAME,CATEGORY) VALUES (106, 'Golikova', 'Team lead')
SELECT* FROM dual;

INSERT ALL
 INTO PRODUCTS (ID,NAME,PRICE) VALUES (1001, 'White bread', 50)
 INTO PRODUCTS (ID,NAME,PRICE) VALUES (1002, 'Black bread', 40)
 INTO PRODUCTS (ID,NAME,PRICE) VALUES (1003, 'Tea', 100)
 INTO PRODUCTS (ID,NAME,PRICE) VALUES (1004, 'Sugar', 70)
 INTO PRODUCTS (ID,NAME,PRICE) VALUES (1005, 'Salt', 10)
SELECT* FROM dual;

INSERT ALL
 INTO CHECKS (ID,ID_EMPLOEE,ID_CUSTOMER,"DATE",AMOUNT) VALUES (1, 102, 1, to_date('01.04.2021','dd.mm.yyyy'), 460)
 INTO CHECKS (ID,ID_EMPLOEE,ID_CUSTOMER,"DATE",AMOUNT) VALUES (2, 104, 2, to_date('01.04.2021','dd.mm.yyyy'), 44)
 INTO CHECKS (ID,ID_EMPLOEE,ID_CUSTOMER,"DATE",AMOUNT) VALUES (3, 105, 3, to_date('02.04.2021','dd.mm.yyyy'), 1330)
 INTO CHECKS (ID,ID_EMPLOEE,ID_CUSTOMER,"DATE",AMOUNT) VALUES (4, 106, 2, to_date('03.04.2021','dd.mm.yyyy'), 132)
 INTO CHECKS (ID,ID_EMPLOEE,ID_CUSTOMER,"DATE",AMOUNT) VALUES (5, 101, 4, to_date('03.04.2021','dd.mm.yyyy'), 140)
 INTO CHECKS (ID,ID_EMPLOEE,ID_CUSTOMER,"DATE",AMOUNT) VALUES (6, 104, 1, to_date('04.04.2021','dd.mm.yyyy'), 94)
SELECT* FROM dual;


INSERT ALL
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (1, 1001, 2)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (1, 1005, 1)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (1, 1004, 5)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (2, 1002, 1)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (3, 1003, 10)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (3, 1004, 4)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (3, 1001, 1)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (4, 1002, 3)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (5, 1004, 2)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (6, 1001, 1)
 INTO PRODUCT_CHECK (ID_CHECK,ID_PRODUCT,"NUMBER") VALUES (6, 1002, 1)
SELECT* FROM dual;

Запросы

1. Имена сотрудников, у которых предпоследняя буква О.

SELECT NAME
FROM EMPLOEES
WHERE NAME LIKE'%o_'

2.Название товаров, которые состоят больше, чем из 3 букв, при этом хотя бы одна буква в слове = e.

SELECT NAME 
FROM PRODUCTS
WHERE NAME LIKE'%_e__%'

3.Все товары, которые продал сотрудник : Титов (Titov).

SELECT PRODUCTS.NAME, EMPLOEES.NAME
FROM PRODUCTS
INNER JOIN PRODUCT_CHECK ON PRODUCTS.ID=PRODUCT_CHECK.ID_PRODUCT
INNER JOIN CHECKS ON PRODUCT_CHECK.ID_CHECK=CHECKS.ID
INNER JOIN EMPLOEES ON CHECKS.ID_EMPLOEE=EMPLOEES.ID
WHERE EMPLOEES.NAME='Titov'
 
или

SELECT PRODUCTS.NAME
FROM PRODUCTS, PRODUCT_CHECK, CHECKS
WHERE PRODUCTS.ID=PRODUCT_CHECK.ID_PRODUCT
AND PRODUCT_CHECK.ID_CHECK=CHECKS.ID
AND CHECKS.ID_EMPLOEE=
(SELECT ID FROM EMPLOEES WHERE NAME='Titov')

4.Вывести имя покупателя, который потратил меньше всего денег.

SELECT CUSTOMERS.NAME, CHECKS.AMOUNT
FROM CUSTOMERS, CHECKS
WHERE CUSTOMERS.ID=CHECKS.ID_CUSTOMER
AND CHECKS.AMOUNT=(
SELECT MIN(AMOUNT) FROM CHECKS
WHERE AMOUNT IN(
SELECT SUM(AMOUNT)
FROM CHECKS
GROUP BY ID_CUSTOMER))

или

SELECT CUSTOMERS.NAME, CHECKS.AMOUNT
FROM CUSTOMERS
INNER JOIN CHECKS ON CUSTOMERS.ID=CHECKS.ID_CUSTOMER
WHERE CHECKS.AMOUNT IN(
SELECT MIN(CHECKS.AMOUNT) FROM CHECKS
WHERE CHECKS.AMOUNT IN(
SELECT SUM(AMOUNT)
FROM CHECKS
GROUP BY ID_CUSTOMER))

5.Все номера чеков, в которых продавался сахар.

SELECT CHECKS.ID, PRODUCTS.NAME
FROM PRODUCTS
INNER JOIN PRODUCT_CHECK ON PRODUCTS.ID=PRODUCT_CHECK.ID_PRODUCT
INNER JOIN CHECKS ON PRODUCT_CHECK.ID_CHECK=CHECKS.ID
WHERE PRODUCTS.NAME='Sugar'

6. Вывести название товара и кол во товара, которого продали больше всего.

SELECT NAME, AMT
FROM 
(
SELECT SUM("NUMBER") AS AMT, ID_PRODUCT
FROM PRODUCT_CHECK
GROUP BY ID_PRODUCT
ORDER BY AMT DESC
OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY
)T1
JOIN PRODUCTS ON PRODUCTS.ID=T1.ID_PRODUCT

7. Первый номер чека, в котором содержался сахар.

SELECT MIN(ID_CHECK)
    FROM PRODUCT_CHECK
    WHERE ID_PRODUCT IN
        (
        SELECT ID FROM PRODUCTS
        WHERE NAME='Sugar'
        )


8. Найти NAME сотрудников и имя товара, сотрудники которые продали самое большое количество хлеба
Имя продавца который продал больше всего черного хлеба и имя продавца который продал больше всего белого хлеба.

SELECT p.NAME, e.NAME, SUM( pc.NUMBER
FROM PRODUCTS p
JOIN PRODUCT_CHECK pc
ON
pc.ID_PRODUCT = p.ID
JOIN CHECKS c
ON
pc.ID_check = c.ID
JOIN EMPLOEES e
ON
c.ID_EMPLOEE = e.ID
WHERE p.NAME like '%bread'
GROUP BY e.NAME, p.NAME
ORDER BY SUM(
pc.NUMBER
desc
FETCH FIRST 2 ROWS ONLY

9. Сотрудник, который продал товаров на большую сумму.

SELECT NAME
FROM EMPLOEES
WHERE ID IN (
SELECT SUM(AMOUNT) AS SUMM FROM CHECKS
GROUP BY ID_EMPLOEE
ORDER BY SUMM DESC
OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY
)

10.	Вывести номер чека и сумма чека, но сумма чека должна рассчитываться самостоятельно, т.е. не брать сумму из чека.

SELECT SUM(PRODUCTS.PRICE*PRODUCT_CHECK."NUMBER") AS AMT, ID_CHECK
FROM PRODUCTS
INNER JOIN PRODUCT_CHECK ON PRODUCTS.ID=PRODUCT_CHECK.ID_PRODUCT
GROUP BY ID_CHECK
ORDER BY ID_CHECK

11.	Выбрать сотрудников с квалификацией = junior, у которых сумма всех продаж больше, чем продажи у Teamlead.

SELECT NAME, AMT FROM 
(
    (
        (
            SELECT SUM(AMOUNT) AS AMT, ID_EMPLOEE FROM CHECKS
            GROUP BY ID_EMPLOEE
        )ASS
        INNER JOIN 
        (
            SELECT * FROM EMPLOEES
            WHERE UPPER(CATEGORY) LIKE 'JUNIOR'
        )ASS2 ON ASS.ID_EMPLOEE=ASS2.ID
    )
    
    FULL OUTER JOIN

    (
        SELECT SUM(AMOUNT) AS TEAMLEAD_MONEY FROM
        (
            SELECT* FROM EMPLOEES
            INNER JOIN CHECKS ON EMPLOEES.ID=CHECKS.ID_EMPLOEE
            WHERE CATEGORY LIKE 'Team lead'
        )
    )
    ON 1=1
)
WHERE AMT > TEAMLEAD_MONEY 
 

12. Вывести все товары, которые купил Sidorov.

SELECT PRODUCTS.NAME, CUSTOMERS.NAME
FROM PRODUCTS
INNER JOIN PRODUCT_CHECK ON PRODUCTS.ID=PRODUCT_CHECK.ID_PRODUCT
INNER JOIN CHECKS ON PRODUCT_CHECK.ID_CHECK=CHECKS.ID
INNER JOIN CUSTOMERS ON CHECKS.ID_CUSTOMER=CUSTOMERS.ID
WHERE CUSTOMERS.NAME='Sidorov'